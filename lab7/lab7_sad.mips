#
# Sum of Absolute Differences Algorithm
#
# Authors: 
#	X Y, Z Q 
#
# Group: ...
#

.data
  left_image:  .word 5, 16, 7, 1, 1, 13, 2, 8, 10
  right_image: .word 4, 15, 8, 0, 2, 12, 3, 7, 11
  sad_array:   .space 36

.text

main:
	addi $s1, $0, 0 # $s1 = i = 0
	addi $s2, $0, 9 # $s2 = image_size = 9
  la $s3, left_image
  la $s4, right_image
  la $s5, sad_array

  loop:
    beq $s1, $s2, end_loop
    lw $a0, 0($s3)
    lw $a1, 0($s4)

    jal abs_diff

    sw $v0, 0($s5)

    addi $s1, $s1, 1
    addi $s3, $s3, 4
    addi $s4, $s4, 4
    addi $s5, $s5, 4
    
    j loop

end_loop:

  la $a0, sad_array
  addi $a1, $0, 9
  jal recursive_sum
  add $t2, $0, $v0
  
  j end

abs_diff:
  sub $v0, $a0, $a1

  sra $t0, $v0, 31
  xor $v0, $v0, $t0
  sub $v0, $v0, $t0

  jr $ra

recursive_sum:
	addi $sp, $sp, -8       # Adjust sp
        addi $t0, $a1, -1       # Compute size - 1
        sw   $t0, 0($sp)        # Save size - 1 to stack
        sw   $ra, 4($sp)        # Save return address
        bne  $a1, $zero, else   # size == 0 ?
        addi $v0, $0, 0         # If size == 0, set return value to 0
        addi $sp, $sp, 8        # Adjust sp
        jr   $ra                # Return

else:
	add  $a1, $t0, $0       # update the second argument
        jal   recursive_sum 
        lw    $t0, 0($sp)       # Restore size - 1 from stack
        sll   $t1, $t0, 2       # Multiply size by 4
        add   $t1, $t1, $a0     # Compute & arr[ size - 1 ]
        lw    $t2, 0($t1)       # t2 = arr[ size - 1 ]
        add   $v0, $v0, $t2     # retval = $v0 + arr[size - 1]
        lw    $ra, 4($sp)       # restore return address from stack         
        addi  $sp, $sp, 8       # Adjust sp
        jr    $ra               # Return

end: