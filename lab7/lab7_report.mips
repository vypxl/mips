.text

main:
  # Calclulate abs_diff(1, 3, 6, 10, 15, 21) = 36 = 0x24
  addi $a0, $zero, 1
  addi $a1, $zero, 3
  addi $a2, $zero, 6
  addi $a3, $zero, 10
  addi $t0, $zero, 15
  addi $t1, $zero, 21
  addi $sp, $sp, -8
  sw $t0, 0($sp)
  sw $t1, 4($sp)

  jal abs_diff_color
  j end
  # Result is in $v0

# R1: $a0, G1: $a1, B1, $a2, R2: $a3, G2: 0($sp), B2: 4($sp)
abs_diff_color:
  # Stack frame setup and register saving
  addi $sp, $sp, -20  # Allocate 5 words on the stack

  sw $ra,  0($sp)     # Save $ra at the seventh spot in the stack frame
  sw $a0,  4($sp)     # Save R1  at the third   spot in the stack frame
  sw $a1,  8($sp)     # Save G1  at the fourth  spot in the stack frame
  sw $a2, 12($sp)     # Save B1  at the fifth   spot in the stack frame
  sw $a3, 16($sp)     # Save R2  at the sixth   spot in the stack frame
  #       20($sp):           G2
  #       24($sp):           B2
  
  # Calculating abs(R1 - R2)
  lw $a0,  4($sp)     # Argument 1: R1
  lw $a1, 16($sp)     # Argument 2: R2
  jal abs_diff        # Call abs_diff(R1, R2)
  move $s0, $v0       # Save result in $s0

  # Calculating abs(G1 - G2)
  lw $a0,  8($sp)     # Argument 1: G1
  lw $a1, 20($sp)     # Argument 2: G2
  jal abs_diff        # call abs_diff(G1, G2)
  add $s0, $s0, $v0   # Add result to $s0

  # Calculating abs(B1 - B2)
  lw $a0, 12($sp)     # Argument 1: B1
  lw $a1, 24($sp)     # Argument 2: B2
  jal abs_diff        # Call abs_diff(B1, B2)
  add $s0, $s0, $v0   # Add result to $s0

  # Setup return, restore registers and stack
  move $v0, $s0       # Move $s0 into return value $v0
  lw $ra, 0($sp)      # Restore $ra
  addi $sp, $sp, 20   # Deallocate stack frame

  # Return
  jr $ra

abs_diff:
  sub $v0, $a0, $a1

  sra $t0, $v0, 31
  xor $v0, $v0, $t0
  sub $v0, $v0, $t0

  jr $ra

end:
